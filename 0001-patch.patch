From 6384c2fbb2d1a6435750f533831259342513a944 Mon Sep 17 00:00:00 2001
From: reimu4869 <ay3456@qq.com>
Date: Sun, 11 Sep 2022 22:24:00 +0800
Subject: [PATCH] =?UTF-8?q?=E6=B5=8B=E8=AF=95=E7=94=9F=E6=88=90patch?=
 =?UTF-8?q?=E6=96=87=E4=BB=B6?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 cdp_ede_local/mycpu_env/myCPU/mycpu_top.v | 275 +++++++++++++++++-----
 1 file changed, 215 insertions(+), 60 deletions(-)

diff --git a/cdp_ede_local/mycpu_env/myCPU/mycpu_top.v b/cdp_ede_local/mycpu_env/myCPU/mycpu_top.v
index a8c80a3..6be318d 100644
--- a/cdp_ede_local/mycpu_env/myCPU/mycpu_top.v
+++ b/cdp_ede_local/mycpu_env/myCPU/mycpu_top.v
@@ -1,13 +1,15 @@
 module mycpu_top(
     input  wire        clk,
     input  wire        resetn,
-    // inst sram interface
-    output wire        inst_sram_we,                        
+    // id_inst sram interface
+    output wire        inst_sram_en,
+    output wire [ 3:0] inst_sram_we,                        
     output wire [31:0] inst_sram_addr,
     output wire [31:0] inst_sram_wdata,
     input  wire [31:0] inst_sram_rdata,
     // data sram interface
-    output wire        data_sram_we,
+    output wire        data_sram_en,
+    output wire [ 3:0] data_sram_we,
     output wire [31:0] data_sram_addr,
     output wire [31:0] data_sram_wdata,
     input  wire [31:0] data_sram_rdata,
@@ -17,17 +19,15 @@ module mycpu_top(
     output wire [ 4:0] debug_wb_rf_wnum,
     output wire [31:0] debug_wb_rf_wdata
 );
-//bug5 ? this register makes the reset signal will be postpone one clock
-//reg          reset;
-//always @(posedge clk) reset <= ~resetn;
+
 
 wire [31:0] seq_pc;
 wire [31:0] fs_pc;
 wire [31:0] ds_pc;
 wire [31:0] nextpc;
 wire        br_taken;
+wire        br_taken_cancel;
 wire [31:0] br_target;
-wire [31:0] inst;
 reg  [31:0] pc;
 
 wire [11:0] alu_op;
@@ -104,44 +104,205 @@ wire [31:0] alu_src2   ;
 wire [31:0] alu_result ;
 
 wire [31:0] mem_result;
-wire [31:0] final_result;        //bug4  delete "ms_"
-
-//bug1 compile errors some signals is not declared
-//'fs_pc','ds_pc','ds_valid','rfrom_mem' is not declared
-//delete ds_valid and rfrom_mem, add fs_pc and ds_pc
-//2022/8/31 17:47
-assign fs_pc    = pc;
-assign ds_pc    = pc;
-assign seq_pc   = fs_pc + 3'h4;                 
-assign nextpc   = br_taken ? br_target : seq_pc;
+wire [31:0] final_result;
+
+//IFreg
+wire if_to_id_valid;
+wire if_ready_go;
+wire if_allowin;
+wire validin;
+wire if_br_taken;
+reg if_valid;
+
+//IDreg
+wire id_ready_go;
+wire id_allowin;
+wire id_to_exe_valid;
+wire id_br_taken;
+reg id_valid;
+reg [31:0] id_pc;
+reg [31:0] id_inst;
+
+//EXEreg
+wire exe_ready_go;
+wire exe_allowin;
+wire exe_to_mem_valid;
+reg exe_valid;
+reg [31:0] exe_pc;
+reg [ 4:0] exe_dest;
+reg [31:0] exe_src1;
+reg [31:0] exe_src2;
+reg        exe_rf_we;
+reg        exe_res_from_mem;
+reg [11:0] exe_alu_op;
+reg [ 3:0] exe_data_sram_we;
+reg        exe_data_sram_en;
+reg [31:0] exe_data_sram_wdata;
+
+//MEMreg
+wire mem_ready_go;
+wire mem_allowin;
+wire mem_to_wb_valid;
+reg mem_valid;
+reg [31:0] mem_pc;
+reg        mem_rf_we;
+reg [ 4:0] mem_dest;
+reg        mem_res_from_mem;
+reg [31:0] mem_alu_result;
+
+//WBreg
+wire wb_ready_go;
+wire wb_allowin;
+wire wb_validout;
+wire allowout;
+reg wb_valid;
+reg [31:0] wb_pc;
+reg        wb_rf_we;
+reg [ 4:0] wb_dest;
+reg [31:0] wb_final_result;
 
 always @(posedge clk) begin
+    if(!resetn) begin
+        if_valid <= 1'b0; 
+    end
+    else if(if_allowin)begin
+        if_valid <= validin;
+    end
+    else if(if_br_taken)begin
+        if_valid <= 1'b0;
+    end
+    
     if (!resetn) begin
-        pc <= 32'h1c000000; 
+        pc <= 32'h1Bfffffc;
     end
-    else begin
+    else if(validin && if_allowin)  begin
         pc <= nextpc;
     end
 end
 
-assign inst_sram_we    = 1'b0;
-assign inst_sram_addr  = pc;
+always @(posedge clk) begin
+    if(!resetn) begin
+        id_valid <= 1'b0;
+    end
+    else if(id_br_taken && id_valid)begin
+        id_valid <= 1'b0;
+    end
+    else if(id_allowin)begin
+        id_valid <= if_to_id_valid;
+    end
+    
+
+    if(if_to_id_valid && id_allowin)begin
+        id_inst <= inst_sram_rdata;
+        id_pc <= pc;
+    end
+end
+
+always @(posedge clk) begin
+    if(!resetn) begin
+        exe_valid <= 1'b0;
+    end
+    else if(exe_allowin)begin
+        exe_valid <= id_to_exe_valid;
+    end
+
+    if(id_to_exe_valid && exe_allowin)begin
+        exe_pc <= id_pc;
+        exe_alu_op <= alu_op;
+        exe_dest <= dest;
+        exe_rf_we <= gr_we;
+        exe_src1 <= alu_src1;
+        exe_src2 <= alu_src2;
+        exe_data_sram_en <= res_from_mem || mem_we;
+        exe_data_sram_we <= {4{mem_we}};
+        exe_data_sram_wdata <= rkd_value;
+        exe_res_from_mem <= res_from_mem;
+    end
+end
+
+always @(posedge clk) begin
+    if(!resetn) begin
+        mem_valid <= 1'b0;
+    end
+    else if(mem_allowin)begin
+        mem_valid <= exe_to_mem_valid;
+    end
+
+    if(exe_to_mem_valid && mem_allowin)begin
+        mem_pc <= exe_pc;
+        mem_dest <= exe_dest;
+        mem_res_from_mem <= exe_res_from_mem;
+        mem_rf_we <= exe_rf_we;
+        mem_alu_result <= alu_result;
+    end
+end
+
+always @(posedge clk) begin
+    if(!resetn) begin
+        wb_valid <= 1'b0;
+    end
+    else if(wb_allowin)begin
+        wb_valid <= mem_to_wb_valid;
+    end
+
+    if(mem_to_wb_valid && wb_allowin)begin
+        wb_pc <= mem_pc;
+        wb_dest <= mem_dest;
+        wb_final_result <= final_result;
+        wb_rf_we <= mem_rf_we;
+    end
+end
+
+assign br_taken_cancel = id_valid && br_taken;
+
+assign validin =1'b1;
+assign if_ready_go = 1'b1;
+assign if_br_taken = br_taken_cancel;
+assign if_allowin = !if_valid || if_ready_go && id_allowin;
+assign if_to_id_valid = if_valid && if_ready_go;
+
+assign id_ready_go = 1'b1;
+assign id_br_taken = br_taken_cancel;
+assign id_allowin = !id_valid || id_ready_go && exe_allowin;
+assign id_to_exe_valid = id_valid & id_ready_go;
+
+assign exe_ready_go = 1'b1;
+assign exe_allowin = !exe_valid || exe_ready_go && mem_allowin; 
+assign exe_to_mem_valid = exe_valid && exe_ready_go;
+
+assign mem_ready_go = 1'b1;
+assign mem_allowin = !mem_valid || mem_ready_go && wb_allowin;
+assign mem_to_wb_valid = mem_valid && mem_ready_go;
+
+assign wb_ready_go = 1'b1;
+assign allowout = 1'b1;
+assign wb_allowin = !wb_valid || wb_ready_go && allowout;
+assign wb_validout = wb_valid && wb_ready_go;
+
+//nextPC
+assign fs_pc    = pc;
+assign ds_pc    = id_pc;
+assign seq_pc   = fs_pc + 3'h4;                 
+assign nextpc   = br_taken_cancel ? br_target : seq_pc;
+
+assign inst_sram_en    = resetn;
+assign inst_sram_we    = 4'b0;
+assign inst_sram_addr  = nextpc;
 assign inst_sram_wdata = 32'b0;
-assign inst            = inst_sram_rdata;
 
-assign op_31_26  = inst[31:26];
-assign op_25_22  = inst[25:22];
-assign op_21_20  = inst[21:20];
-assign op_19_15  = inst[19:15];
+assign op_31_26  = id_inst[31:26];
+assign op_25_22  = id_inst[25:22];
+assign op_21_20  = id_inst[21:20];
+assign op_19_15  = id_inst[19:15];
 
-assign rd   = inst[ 4: 0];
-assign rj   = inst[ 9: 5];
-assign rk   = inst[14:10];
+assign rd   = id_inst[ 4: 0];
+assign rj   = id_inst[ 9: 5];
+assign rk   = id_inst[14:10];
 
-assign i12  = inst[21:10];
-assign i20  = inst[24: 5];
-assign i16  = inst[25:10];
-assign i26  = {inst[ 9: 0], inst[25:10]};
+assign i12  = id_inst[21:10];
+assign i20  = id_inst[24: 5];
+assign i16  = id_inst[25:10];
+assign i26  = {id_inst[ 9: 0], id_inst[25:10]};
 
 decoder_6_64 u_dec0(.in(op_31_26 ), .out(op_31_26_d ));
 decoder_4_16 u_dec1(.in(op_25_22 ), .out(op_25_22_d ));
@@ -167,7 +328,7 @@ assign inst_b      = op_31_26_d[6'h14];
 assign inst_bl     = op_31_26_d[6'h15];
 assign inst_beq    = op_31_26_d[6'h16];
 assign inst_bne    = op_31_26_d[6'h17];
-assign inst_lu12i_w= op_31_26_d[6'h05] & ~inst[25];
+assign inst_lu12i_w= op_31_26_d[6'h05] & ~id_inst[25];
 
 assign alu_op[ 0] = inst_add_w | inst_addi_w | inst_ld_w | inst_st_w
                     | inst_jirl | inst_bl;
@@ -215,9 +376,7 @@ assign src2_is_imm   = inst_slli_w |
 
 assign res_from_mem  = inst_ld_w;
 assign dst_is_r1     = inst_bl;
-//bug6  instruction "bl" need to write in regfile
-//otherwise, it leads to the golden_trace and the open_trace signal delay one clock
-//2022/8/31     21:55
+
 assign gr_we         = ~inst_st_w & ~inst_beq & ~inst_bne & ~inst_b;
 assign mem_we        = inst_st_w;
 assign dest          = dst_is_r1 ? 5'd1 : rd;
@@ -239,8 +398,7 @@ assign rj_value  = rf_rdata1;
 assign rkd_value = rf_rdata2;
 
 assign rj_eq_rd = (rj_value == rkd_value);
-//the br_taken signal could be judged without ds_valid
-//ds_valid can be deleted
+
 assign br_taken =  inst_beq  &&  rj_eq_rd
                    || inst_bne  && !rj_eq_rd
                    || inst_jirl
@@ -250,37 +408,34 @@ assign br_taken =  inst_beq  &&  rj_eq_rd
 assign br_target = (inst_beq || inst_bne || inst_bl || inst_b) ? (ds_pc + br_offs) :
                                                    /*inst_jirl*/ (rj_value + jirl_offs);
 
-assign alu_src1 = src1_is_pc  ? pc[31:0] : rj_value;
+assign alu_src1 = src1_is_pc  ? id_pc[31:0] : rj_value;
 assign alu_src2 = src2_is_imm ? imm : rkd_value;
 
 alu u_alu(
-    .alu_op     (alu_op    ),
-    .alu_src1   (alu_src1  ),               //bug3  "addi"  the source of the adder is wrong
-    .alu_src2   (alu_src2  ),               //it makes the adder result wrong, "0xffffffff" and "0xfffffffe"
-    .alu_result (alu_result)                //2022/8/31 21:01
+    .alu_op     (exe_alu_op    ),
+    .alu_src1   (exe_src1  ),               
+    .alu_src2   (exe_src2  ),               
+    .alu_result (alu_result)                
     );
 
-//assign data_sram_en    = (rfrom_mem || mem_we) && valid;    //data_sram_en is not used in front or back of this line
-assign data_sram_we    = mem_we;
+
+
+assign data_sram_en    = exe_data_sram_en && exe_valid;
+assign data_sram_we    = exe_data_sram_we;
 assign data_sram_addr  = alu_result;
-assign data_sram_wdata = rkd_value;
+assign data_sram_wdata = exe_data_sram_wdata;
 
-assign mem_result   = data_sram_rdata;
-//bug4 the signal "final_result" wa not declared,it only has one bit
-//it makes the result of rf_data wrong "0xffffffff" and "0x00000001"
-//2022/8/31     21:18 
-assign final_result = res_from_mem ? mem_result : alu_result;                
+assign mem_result   = data_sram_rdata; 
+assign final_result = mem_res_from_mem ? mem_result : mem_alu_result;                
 
-assign rf_we    = gr_we;
-assign rf_waddr = dest;
-assign rf_wdata = final_result;
+assign rf_we    = wb_rf_we && wb_valid;
+assign rf_waddr = wb_dest;
+assign rf_wdata = wb_final_result;
 
 // debug info generate
-assign debug_wb_pc       = pc;
-//bug2 "Z" debug_sram_wen was not used
-//2022/8/31 18:10
+assign debug_wb_pc       = wb_pc;
 assign debug_wb_rf_we   = {4{rf_we}};                   
-assign debug_wb_rf_wnum  = dest;
-assign debug_wb_rf_wdata = final_result;
+assign debug_wb_rf_wnum  = wb_dest;
+assign debug_wb_rf_wdata = rf_wdata;
 
 endmodule
-- 
2.37.3.windows.1

